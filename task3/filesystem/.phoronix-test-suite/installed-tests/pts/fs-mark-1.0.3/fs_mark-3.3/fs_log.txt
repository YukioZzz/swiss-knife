
#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:54:03 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        771.0             6173
     4         2000      1048576        763.1             6110
     4         3000      1048576        660.5             6157
     4         4000      1048576        740.1             6031
     4         5000      1048576        764.6             6183
     4         6000      1048576        656.7            10061
     4         7000      1048576        839.2             7288
     4         8000      1048576        878.1             6274
     4         9000      1048576        884.1             6065
     4        10000      1048576        743.4             6214
     4        11000      1048576        758.8             6359
     4        12000      1048576        733.6             6042
     4        13000      1048576        710.7             6076
     4        14000      1048576        767.7             6080
     4        15000      1048576        826.1             5919
     4        16000      1048576        735.2             6021
     4        17000      1048576        867.9             6193
     4        18000      1048576        798.1             6099
     4        19000      1048576        757.4             6287
     4        20000      1048576        792.9             6225

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:54:33 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        821.7             5793
     4         2000      1048576        787.4             5739
     4         3000      1048576        784.0             6121
     4         4000      1048576        832.7             5892
     4         5000      1048576        722.7             5869
     4         6000      1048576        734.5             6337
     4         7000      1048576        785.0             5904
     4         8000      1048576        794.2             6026
     4         9000      1048576        791.3             5970
     4        10000      1048576        768.8             6016
     4        11000      1048576        721.2             6163
     4        12000      1048576        792.7             6018
     4        13000      1048576        822.9             5885
     4        14000      1048576        805.8             6051
     4        15000      1048576        722.0             5925
     4        16000      1048576        783.4             5870
     4        17000      1048576        746.7             5958
     4        18000      1048576        673.6             6228
     4        19000      1048576        772.5             6138
     4        20000      1048576        760.4             5945

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:55:04 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        764.4             5869
     4         2000      1048576        811.6             5991
     4         3000      1048576        819.7             5988
     4         4000      1048576        706.3             6020
     4         5000      1048576        849.1             5955
     4         6000      1048576        842.4             5983
     4         7000      1048576        844.9             6036
     4         8000      1048576        726.7             6115
     4         9000      1048576        818.4             6018
     4        10000      1048576        738.4             5870
     4        11000      1048576        763.6             6189
     4        12000      1048576        770.5             5975
     4        13000      1048576        830.4             6061
     4        14000      1048576        745.0             6037
     4        15000      1048576        737.5             6022
     4        16000      1048576        755.2             6063
     4        17000      1048576        829.4             5972
     4        18000      1048576        788.3             5942
     4        19000      1048576        773.8             6156
     4        20000      1048576        843.9             6001

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:55:34 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        893.0             5901
     4         2000      1048576        792.1             6031
     4         3000      1048576        725.8             6464
     4         4000      1048576        761.4             5980
     4         5000      1048576        748.7             5987
     4         6000      1048576        724.8             6057
     4         7000      1048576        746.8             6031
     4         8000      1048576        841.8             6763
     4         9000      1048576        720.1             5991
     4        10000      1048576        757.8             6047
     4        11000      1048576        806.8             6160
     4        12000      1048576        766.1             6055
     4        13000      1048576        705.4             6052
     4        14000      1048576        861.9             6443
     4        15000      1048576        794.7             5930
     4        16000      1048576        747.0             5961
     4        17000      1048576        783.0             5909
     4        18000      1048576        748.3             6296
     4        19000      1048576        695.3             6095
     4        20000      1048576        824.9             6077

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:56:05 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        800.3             5893
     4         2000      1048576        676.4             5950
     4         3000      1048576        826.0             5998
     4         4000      1048576        812.6             6006
     4         5000      1048576        746.7             5995
     4         6000      1048576        742.0             6605
     4         7000      1048576        784.8             6060
     4         8000      1048576        693.4             6119
     4         9000      1048576        745.8             6013
     4        10000      1048576        796.6             5959
     4        11000      1048576        822.8             6153
     4        12000      1048576        684.3             5961
     4        13000      1048576        753.8             5875
     4        14000      1048576        800.8             6095
     4        15000      1048576        814.6             6925
     4        16000      1048576        792.3             6161
     4        17000      1048576        815.3             6086
     4        18000      1048576        800.0             5973
     4        19000      1048576        811.9             6201
     4        20000      1048576        712.9             5957

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:56:35 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        822.7             5883
     4         2000      1048576        808.6             5845
     4         3000      1048576        753.5             6097
     4         4000      1048576        704.7             6114
     4         5000      1048576        800.1             5887
     4         6000      1048576        743.5             6218
     4         7000      1048576        664.6             6906
     4         8000      1048576        819.5             5842
     4         9000      1048576        830.8             5856
     4        10000      1048576        757.7             5908
     4        11000      1048576        778.3             6074
     4        12000      1048576        818.7             7568
     4        13000      1048576        810.6             5848
     4        14000      1048576        731.9             5987
     4        15000      1048576        831.7             5815
     4        16000      1048576        862.8             6033
     4        17000      1048576        734.1             5893
     4        18000      1048576        773.2             6009
     4        19000      1048576        774.5             6036
     4        20000      1048576        691.8             5930

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:57:06 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        832.2             5918
     4         2000      1048576        796.0             5998
     4         3000      1048576        754.2             6127
     4         4000      1048576        793.6             6140
     4         5000      1048576        781.7             6373
     4         6000      1048576        733.5             6004
     4         7000      1048576        775.0             5925
     4         8000      1048576        868.0             6116
     4         9000      1048576        831.4             5980
     4        10000      1048576        703.8             5899
     4        11000      1048576        786.9             6082
     4        12000      1048576        718.9             6187
     4        13000      1048576        718.7             6402
     4        14000      1048576        733.7             6119
     4        15000      1048576        878.0             5999
     4        16000      1048576        789.3             6139
     4        17000      1048576        831.4             6050
     4        18000      1048576        755.5             6223
     4        19000      1048576        747.7             6033
     4        20000      1048576        832.5             5875

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:57:36 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        849.7             6261
     4         2000      1048576        752.4             6133
     4         3000      1048576        881.5             6181
     4         4000      1048576        782.0             5980
     4         5000      1048576        659.2             6120
     4         6000      1048576        888.9             6240
     4         7000      1048576        811.3             6073
     4         8000      1048576        755.8             6133
     4         9000      1048576        797.7             6163
     4        10000      1048576        840.5             5955
     4        11000      1048576        694.8             6173
     4        12000      1048576        822.5             6077
     4        13000      1048576        765.0             6405
     4        14000      1048576        803.4             6176
     4        15000      1048576        726.0             6070
     4        16000      1048576        739.9             6164
     4        17000      1048576        652.8             6328
     4        18000      1048576        735.4             6380
     4        19000      1048576        808.4             6523
     4        20000      1048576        809.2             6191

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:58:07 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        819.0             5775
     4         2000      1048576        798.7             5955
     4         3000      1048576        801.1             6039
     4         4000      1048576        720.1             5874
     4         5000      1048576        834.8             6624
     4         6000      1048576        842.3             5953
     4         7000      1048576        736.1             5875
     4         8000      1048576        726.1             6191
     4         9000      1048576        791.4             6049
     4        10000      1048576        640.1             6028
     4        11000      1048576        795.2             6201
     4        12000      1048576        803.2             5909
     4        13000      1048576        812.3             5972
     4        14000      1048576        718.7             6185
     4        15000      1048576        834.6             5837
     4        16000      1048576        767.7            10488
     4        17000      1048576        728.2             5942
     4        18000      1048576        772.0             6011
     4        19000      1048576        798.5             6157
     4        20000      1048576        776.4             6270

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:58:37 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        831.3             5905
     4         2000      1048576        719.5             5832
     4         3000      1048576        696.2             6178
     4         4000      1048576        804.4             5917
     4         5000      1048576        847.7             5898
     4         6000      1048576        793.3             6036
     4         7000      1048576        777.5             5963
     4         8000      1048576        876.5             6112
     4         9000      1048576        693.0             6105
     4        10000      1048576        779.1             6038
     4        11000      1048576        736.8             6197
     4        12000      1048576        755.5             5898
     4        13000      1048576        792.2             5913
     4        14000      1048576        754.4             6061
     4        15000      1048576        683.9             6133
     4        16000      1048576        706.0             6162
     4        17000      1048576        831.0             5992
     4        18000      1048576        878.9             5933
     4        19000      1048576        754.5             6099
     4        20000      1048576        817.8             5838

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:59:08 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        822.8             5918
     4         2000      1048576        788.5             5974
     4         3000      1048576        809.5             6037
     4         4000      1048576        873.8             5972
     4         5000      1048576        807.6             5877
     4         6000      1048576        830.5             6051
     4         7000      1048576        755.3             5923
     4         8000      1048576        690.0             6080
     4         9000      1048576        767.1             5883
     4        10000      1048576        779.8             5896
     4        11000      1048576        767.3             5970
     4        12000      1048576        705.9             5922
     4        13000      1048576        847.3             5908
     4        14000      1048576        796.0             6071
     4        15000      1048576        779.0             5932
     4        16000      1048576        795.5             6097
     4        17000      1048576        830.1             6009
     4        18000      1048576        793.6             5966
     4        19000      1048576        741.9             6401
     4        20000      1048576        732.9             6021

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 13:59:38 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        745.9             5970
     4         2000      1048576        805.8             5997
     4         3000      1048576        842.0             6312
     4         4000      1048576        690.3             5877
     4         5000      1048576        807.7             5976
     4         6000      1048576        860.5             6655
     4         7000      1048576        712.6             6015
     4         8000      1048576        830.4             5954
     4         9000      1048576        864.6             5956
     4        10000      1048576        788.3             5900
     4        11000      1048576        763.6             6198
     4        12000      1048576        812.1             7968
     4        13000      1048576        759.2             5988
     4        14000      1048576        732.4             6398
     4        15000      1048576        806.7             6100
     4        16000      1048576        826.5             6012
     4        17000      1048576        703.2             5973
     4        18000      1048576        763.9             6077
     4        19000      1048576        671.3             6114
     4        20000      1048576        755.7             6062

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:00:08 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        791.1             5854
     4         2000      1048576        792.5             5839
     4         3000      1048576        769.8             5861
     4         4000      1048576        812.5             5907
     4         5000      1048576        807.9             5852
     4         6000      1048576        729.9             6041
     4         7000      1048576        796.1             5840
     4         8000      1048576        762.9             5993
     4         9000      1048576        725.9             6010
     4        10000      1048576        793.0             5939
     4        11000      1048576        750.8             5936
     4        12000      1048576        709.0             5872
     4        13000      1048576        846.5             5948
     4        14000      1048576        828.6             6092
     4        15000      1048576        757.8             5861
     4        16000      1048576        794.1             5979
     4        17000      1048576        826.0             5887
     4        18000      1048576        726.4             5906
     4        19000      1048576        789.9             5877
     4        20000      1048576        852.6             5759

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:00:39 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        907.7             6027
     4         2000      1048576        695.9             5915
     4         3000      1048576        750.5             6092
     4         4000      1048576        759.1             6044
     4         5000      1048576        754.0             6097
     4         6000      1048576        823.6             6043
     4         7000      1048576        745.2             5973
     4         8000      1048576        753.1             6122
     4         9000      1048576        885.5             5941
     4        10000      1048576        852.9             6052
     4        11000      1048576        718.4             6163
     4        12000      1048576        780.4             5954
     4        13000      1048576        806.9             6125
     4        14000      1048576        809.8             6284
     4        15000      1048576        762.2             6036
     4        16000      1048576        832.6             6093
     4        17000      1048576        683.6             6043
     4        18000      1048576        715.3             6755
     4        19000      1048576        809.0             7026
     4        20000      1048576        798.2             6040

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:01:09 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        732.9             6017
     4         2000      1048576        745.2             5828
     4         3000      1048576        773.0             6164
     4         4000      1048576        753.6             6228
     4         5000      1048576        824.2             6032
     4         6000      1048576        807.0             6128
     4         7000      1048576        743.5             5844
     4         8000      1048576        788.4             5838
     4         9000      1048576        794.3             5987
     4        10000      1048576        687.0             5925
     4        11000      1048576        799.6             8265
     4        12000      1048576        782.9             6096
     4        13000      1048576        780.9             5986
     4        14000      1048576        814.7             6367
     4        15000      1048576        813.7             5880
     4        16000      1048576        703.4             6718
     4        17000      1048576        819.5             5987
     4        18000      1048576        811.5             5963
     4        19000      1048576        790.6             5974
     4        20000      1048576        739.9             5927

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:01:47 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1188.5           141539
     4        40000      1048576       1181.9           141745
     4        60000      1048576       1121.0           142508
     4        80000      1048576       1141.9           142775
     4       100000      1048576       1154.3           142672

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:03:20 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1115.2           142176
     4        40000      1048576       1164.3           140111
     4        60000      1048576       1168.0           139373
     4        80000      1048576       1153.1           140908
     4       100000      1048576       1141.4           140678

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:04:55 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1117.3           143997
     4        40000      1048576       1142.0           142386
     4        60000      1048576       1180.2           142534
     4        80000      1048576       1174.5           142086
     4       100000      1048576       1172.1           141834

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:06:28 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1119.2           144097
     4        40000      1048576       1197.7           140099
     4        60000      1048576       1184.6           141808
     4        80000      1048576       1118.3           143313
     4       100000      1048576       1154.0           142540

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:08:02 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1128.9           143556
     4        40000      1048576       1189.4           140968
     4        60000      1048576       1172.9           140336
     4        80000      1048576       1149.3           142925
     4       100000      1048576       1130.0           141545

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:09:36 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1103.0           150576
     4        40000      1048576       1178.4           140111
     4        60000      1048576       1166.4           142259
     4        80000      1048576       1181.4           140853
     4       100000      1048576       1137.1           142235

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:11:10 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1101.8           141970
     4        40000      1048576       1184.3           140913
     4        60000      1048576       1186.5           140443
     4        80000      1048576       1150.7           141756
     4       100000      1048576       1180.2           140949

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:12:43 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1131.0           141875
     4        40000      1048576       1196.7           139295
     4        60000      1048576       1183.8           140832
     4        80000      1048576       1164.1           141158
     4       100000      1048576       1189.2           141632

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:14:23 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        817.9            26140
     4         8000      1048576        738.2            26042
     4        12000      1048576        757.7            26206
     4        16000      1048576        815.7            25392
     4        20000      1048576        800.4            25571
     4        24000      1048576        781.8            25273
     4        28000      1048576        814.1            28370
     4        32000      1048576        751.8            25826
     4        36000      1048576        791.3            25616
     4        40000      1048576        820.9            25266

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:15:19 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        744.5            24862
     4         8000      1048576        803.2            25479
     4        12000      1048576        817.1            25300
     4        16000      1048576        770.4            25301
     4        20000      1048576        785.9            25244
     4        24000      1048576        779.1            24950
     4        28000      1048576        805.2            25244
     4        32000      1048576        771.8            25048
     4        36000      1048576        742.0            25906
     4        40000      1048576        818.1            24991

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:16:16 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        791.3            25597
     4         8000      1048576        794.6            25528
     4        12000      1048576        801.8            25864
     4        16000      1048576        780.4            25275
     4        20000      1048576        784.9            26185
     4        24000      1048576        791.1            25594
     4        28000      1048576        806.0            25898
     4        32000      1048576        785.7            25396
     4        36000      1048576        774.7            25336
     4        40000      1048576        793.9            25520

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:17:11 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        776.0            25804
     4         8000      1048576        799.8            25614
     4        12000      1048576        748.2            25287
     4        16000      1048576        797.1            25304
     4        20000      1048576        765.6            25134
     4        24000      1048576        800.2            25957
     4        28000      1048576        786.7            25210
     4        32000      1048576        771.1            25970
     4        36000      1048576        772.7            25418
     4        40000      1048576        795.4            25376

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:18:08 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        791.5            25847
     4         8000      1048576        822.7            25690
     4        12000      1048576        779.3            26207
     4        16000      1048576        744.7            27951
     4        20000      1048576        779.8            25705
     4        24000      1048576        780.6            26485
     4        28000      1048576        781.7            24901
     4        32000      1048576        735.9            27066
     4        36000      1048576        783.0            25665
     4        40000      1048576        796.5            25896

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:19:04 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        801.4            25450
     4         8000      1048576        758.2            26098
     4        12000      1048576        815.1            25482
     4        16000      1048576        813.6            25404
     4        20000      1048576        753.7            26597
     4        24000      1048576        786.7            27586
     4        28000      1048576        792.1            25332
     4        32000      1048576        754.6            26900
     4        36000      1048576        799.2            25701
     4        40000      1048576        783.7            25891

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:20:01 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        819.3            25438
     4         8000      1048576        790.7            26819
     4        12000      1048576        815.1            25338
     4        16000      1048576        776.0            25809
     4        20000      1048576        764.9            26093
     4        24000      1048576        781.4            26050
     4        28000      1048576        808.1            25549
     4        32000      1048576        803.4            32149
     4        36000      1048576        795.2            25229
     4        40000      1048576        786.4            25643

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:20:56 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        769.5            26781
     4         8000      1048576        822.9            26084
     4        12000      1048576        794.8            25624
     4        16000      1048576        760.7            25333
     4        20000      1048576        799.7            25750
     4        24000      1048576        787.0            25830
     4        28000      1048576        777.3            25766

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:23:19 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        760.1             5870
     4         2000      1048576        800.9             5987
     4         3000      1048576        768.4             6119
     4         4000      1048576        806.7             5987
     4         5000      1048576        889.4             5967
     4         6000      1048576        815.7             6456
     4         7000      1048576        731.2             6053
     4         8000      1048576        742.5             6059
     4         9000      1048576        827.6             5892
     4        10000      1048576        809.7             6031
     4        11000      1048576        792.1             6141
     4        12000      1048576        761.3             6007
     4        13000      1048576        849.1             6147
     4        14000      1048576        798.0             6074
     4        15000      1048576        817.1             5981
     4        16000      1048576        693.2             6089
     4        17000      1048576        753.8             6145
     4        18000      1048576        797.0             6004
     4        19000      1048576        744.7             6102
     4        20000      1048576        700.7             6070

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:23:50 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        860.4             5871
     4         2000      1048576        796.0             5972
     4         3000      1048576        695.2             5924
     4         4000      1048576        758.2             6126
     4         5000      1048576        759.6             6215
     4         6000      1048576        740.6             7454
     4         7000      1048576        770.8             5986
     4         8000      1048576        801.7             6067
     4         9000      1048576        702.4             5942
     4        10000      1048576        753.0             5819
     4        11000      1048576        850.6             6071
     4        12000      1048576        819.9             5904
     4        13000      1048576        734.3             6002
     4        14000      1048576        800.6             7235
     4        15000      1048576        725.9             5938
     4        16000      1048576        734.4             6017
     4        17000      1048576        787.3             5882
     4        18000      1048576        854.6             5896
     4        19000      1048576        720.0             5958
     4        20000      1048576        755.5             5900

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:24:21 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        803.0             5948
     4         2000      1048576        796.3             5971
     4         3000      1048576        794.5             6124
     4         4000      1048576        794.9             5869
     4         5000      1048576        801.7             5948
     4         6000      1048576        849.8             6176
     4         7000      1048576        800.9             5971
     4         8000      1048576        674.3             6040
     4         9000      1048576        835.1             5927
     4        10000      1048576        827.8             5905
     4        11000      1048576        695.9             5993
     4        12000      1048576        724.2             5986
     4        13000      1048576        811.6             6012
     4        14000      1048576        748.7             6107
     4        15000      1048576        775.4             6009
     4        16000      1048576        848.5             6019
     4        17000      1048576        802.1             5921
     4        18000      1048576        684.1             5965
     4        19000      1048576        797.9             5993
     4        20000      1048576        743.8             6139

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:24:51 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        800.0             6066
     4         2000      1048576        828.1             6570
     4         3000      1048576        821.1             6040
     4         4000      1048576        761.3             5969
     4         5000      1048576        795.9             6586
     4         6000      1048576        787.4             6100
     4         7000      1048576        665.1             6222
     4         8000      1048576        785.1             6090
     4         9000      1048576        834.4             6061
     4        10000      1048576        733.5             6959
     4        11000      1048576        784.6             6120
     4        12000      1048576        789.6             6018
     4        13000      1048576        696.3             6073
     4        14000      1048576        728.0             6070
     4        15000      1048576        746.0             5920
     4        16000      1048576        748.2             6062
     4        17000      1048576        701.2             6152
     4        18000      1048576        844.9             6886
     4        19000      1048576        699.9             6115
     4        20000      1048576        749.7             5985

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:25:22 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        846.6             5998
     4         2000      1048576        779.1             6245
     4         3000      1048576        698.6             6093
     4         4000      1048576        754.6             5971
     4         5000      1048576        720.0             5984
     4         6000      1048576        749.3             6222
     4         7000      1048576        825.6             5985
     4         8000      1048576        783.1             6097
     4         9000      1048576        754.8             6035
     4        10000      1048576        771.0             5841
     4        11000      1048576        801.8             6086
     4        12000      1048576        779.8             6040
     4        13000      1048576        823.3             6192
     4        14000      1048576        818.8             6238
     4        15000      1048576        784.6             6096
     4        16000      1048576        720.1             6286
     4        17000      1048576        756.8             6081
     4        18000      1048576        766.0             6399
     4        19000      1048576        807.9             6048
     4        20000      1048576        835.7             5977

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:25:52 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        834.1             5890
     4         2000      1048576        785.0             5928
     4         3000      1048576        886.0             6063
     4         4000      1048576        768.9             5997
     4         5000      1048576        703.1             6019
     4         6000      1048576        882.3             5844
     4         7000      1048576        826.1             5846
     4         8000      1048576        710.1             8806
     4         9000      1048576        815.5             5978
     4        10000      1048576        894.4             5935
     4        11000      1048576        739.7             6267
     4        12000      1048576        762.8             5880
     4        13000      1048576        805.4             5940
     4        14000      1048576        865.3             6770
     4        15000      1048576        702.5             6021
     4        16000      1048576        815.2             6041
     4        17000      1048576        720.3             5990
     4        18000      1048576        748.9             5938
     4        19000      1048576        794.9             6450
     4        20000      1048576        793.4             5901

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:26:23 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        788.3             5850
     4         2000      1048576        792.4             5803
     4         3000      1048576        763.5             6199
     4         4000      1048576        722.4             5944
     4         5000      1048576        815.4             6547
     4         6000      1048576        786.8             6099
     4         7000      1048576        717.3             5932
     4         8000      1048576        796.4             6012
     4         9000      1048576        783.9             5984
     4        10000      1048576        727.2             8117
     4        11000      1048576        811.5             6893
     4        12000      1048576        853.1             5999
     4        13000      1048576        790.6             5858
     4        14000      1048576        792.5             6967
     4        15000      1048576        898.4             5951
     4        16000      1048576        714.4             8597
     4        17000      1048576        807.6             5849
     4        18000      1048576        776.8             5953
     4        19000      1048576        770.0             5992
     4        20000      1048576        780.0             5914

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:26:53 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        799.4             6008
     4         2000      1048576        724.2             6023
     4         3000      1048576        712.1             6227
     4         4000      1048576        836.3             5945
     4         5000      1048576        813.8             6023
     4         6000      1048576        758.4             6187
     4         7000      1048576        826.7             5993
     4         8000      1048576        816.2             6130
     4         9000      1048576        745.7             5990
     4        10000      1048576        819.8             6129
     4        11000      1048576        731.4             6196
     4        12000      1048576        721.8             6056
     4        13000      1048576        809.1             6038
     4        14000      1048576        869.1             6145
     4        15000      1048576        693.1             5953
     4        16000      1048576        704.8             6154
     4        17000      1048576        898.1             5927
     4        18000      1048576        864.0             5936
     4        19000      1048576        718.1             6770
     4        20000      1048576        767.8             6160

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:27:23 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        806.1             5937
     4         2000      1048576        785.8             5921
     4         3000      1048576        788.3             6036
     4         4000      1048576        776.5             5874
     4         5000      1048576        684.8             5912
     4         6000      1048576        820.5             5965
     4         7000      1048576        821.5             5909
     4         8000      1048576        739.6             5984
     4         9000      1048576        863.7             6025
     4        10000      1048576        831.5             5901
     4        11000      1048576        740.6             5966
     4        12000      1048576        746.1             5997
     4        13000      1048576        853.8             5940
     4        14000      1048576        684.9             6005
     4        15000      1048576        760.8             6129
     4        16000      1048576        736.3             6703
     4        17000      1048576        723.2             6083
     4        18000      1048576        701.7             5856
     4        19000      1048576        824.5             6036
     4        20000      1048576        843.9             5864

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:27:54 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        708.6             6028
     4         2000      1048576        816.6             5967
     4         3000      1048576        819.6             5977
     4         4000      1048576        763.7             5910
     4         5000      1048576        803.1             5975
     4         6000      1048576        782.5             6060
     4         7000      1048576        781.0            11129
     4         8000      1048576        732.1             5955
     4         9000      1048576        799.4             6175
     4        10000      1048576        717.9             5998
     4        11000      1048576        782.4             6608
     4        12000      1048576        829.1             5948
     4        13000      1048576        666.9             6600
     4        14000      1048576        754.6             6201
     4        15000      1048576        827.1             6651
     4        16000      1048576        787.4             6033
     4        17000      1048576        798.8             5949
     4        18000      1048576        783.8             6161
     4        19000      1048576        808.5             6156
     4        20000      1048576        772.7             5863

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:28:24 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        837.5             5960
     4         2000      1048576        845.5             5883
     4         3000      1048576        700.4             6148
     4         4000      1048576        757.3             6616
     4         5000      1048576        815.7             5787
     4         6000      1048576        809.9             5969
     4         7000      1048576        774.6             6370
     4         8000      1048576        752.6             5917
     4         9000      1048576        734.3             5943
     4        10000      1048576        832.2             5984
     4        11000      1048576        799.4             6077
     4        12000      1048576        732.5             5962
     4        13000      1048576        799.2             5887
     4        14000      1048576        853.7             6217
     4        15000      1048576        748.2             5892
     4        16000      1048576        741.7             6147
     4        17000      1048576        797.1             5892
     4        18000      1048576        801.9             5867
     4        19000      1048576        830.6             6133
     4        20000      1048576        824.3             5958

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:28:54 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        764.5             6109
     4         2000      1048576        760.0             5973
     4         3000      1048576        817.8             6066
     4         4000      1048576        743.0             6020
     4         5000      1048576        777.0             6022
     4         6000      1048576        851.3             6105
     4         7000      1048576        788.1             6001
     4         8000      1048576        674.6             6056
     4         9000      1048576        778.7             5965
     4        10000      1048576        791.1             6082
     4        11000      1048576        714.9             6092
     4        12000      1048576        791.9             6723
     4        13000      1048576        778.5             6011
     4        14000      1048576        789.4             6097
     4        15000      1048576        815.1             5952
     4        16000      1048576        843.5             6135
     4        17000      1048576        737.3             6010
     4        18000      1048576        852.4             6009
     4        19000      1048576        857.9             6250
     4        20000      1048576        749.6             5928

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:29:24 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        738.8             5794
     4         2000      1048576        786.2             5880
     4         3000      1048576        685.4             6115
     4         4000      1048576        784.8             5882
     4         5000      1048576        858.7             5997
     4         6000      1048576        815.3             6009
     4         7000      1048576        684.8             6029
     4         8000      1048576        815.3             6325
     4         9000      1048576        856.9             5963
     4        10000      1048576        750.9             5899
     4        11000      1048576        785.4             6865
     4        12000      1048576        844.9             5904
     4        13000      1048576        831.5             5912
     4        14000      1048576        769.0             5977
     4        15000      1048576        742.5             5941
     4        16000      1048576        688.5             6276
     4        17000      1048576        770.3             5974
     4        18000      1048576        789.5             6030
     4        19000      1048576        721.7             6973
     4        20000      1048576        705.2             6116

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:29:55 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        845.6             6005
     4         2000      1048576        823.7             5946
     4         3000      1048576        717.3             6089
     4         4000      1048576        770.3             5916
     4         5000      1048576        829.1             5930
     4         6000      1048576        725.6             6082
     4         7000      1048576        758.4             5989
     4         8000      1048576        773.5             6022
     4         9000      1048576        702.0             6155
     4        10000      1048576        751.5             6007
     4        11000      1048576        797.4             6093
     4        12000      1048576        832.9             5896
     4        13000      1048576        832.1             6004
     4        14000      1048576        766.8             6207
     4        15000      1048576        713.3             5971
     4        16000      1048576        819.5             5831
     4        17000      1048576        798.6             5974
     4        18000      1048576        732.7             6033
     4        19000      1048576        736.6             6196
     4        20000      1048576        838.5             6273

#  ./fs_mark  -d  scratch  -L  20  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:30:25 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576        744.1             6030
     4         2000      1048576        741.7             6120
     4         3000      1048576        784.7             6135
     4         4000      1048576        818.9             6068
     4         5000      1048576        816.0             5984
     4         6000      1048576        819.0             6035
     4         7000      1048576        786.6             5926
     4         8000      1048576        790.9             6049
     4         9000      1048576        883.7             5997
     4        10000      1048576        772.1             5960
     4        11000      1048576        757.0             6241
     4        12000      1048576        869.4             6102
     4        13000      1048576        780.0             6076
     4        14000      1048576        690.5             6158
     4        15000      1048576        893.5             5998
     4        16000      1048576        859.1             6235
     4        17000      1048576        737.6             6670
     4        18000      1048576        765.2             6921
     4        19000      1048576        849.2             6122
     4        20000      1048576        819.0             5976

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:31:03 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1152.0           139865
     4        40000      1048576       1175.2           138683
     4        60000      1048576       1142.0           141090
     4        80000      1048576       1160.7           140916
     4       100000      1048576       1173.7           141078

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:32:36 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1096.4           143502
     4        40000      1048576       1177.7           141843
     4        60000      1048576       1174.4           142169
     4        80000      1048576       1139.3           143514
     4       100000      1048576       1180.2           142701

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:34:10 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1108.8           152826
     4        40000      1048576       1189.0           141449
     4        60000      1048576       1153.8           142142
     4        80000      1048576       1093.6           143585
     4       100000      1048576       1165.2           142866

#  ./fs_mark  -d  scratch  -L  5  -s  1048576  -n  5000  -t  4 
#	Version 3.3, 4 thread(s) starting at Sun Dec 26 14:35:45 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4        20000      1048576       1103.0           141901
     4        40000      1048576       1213.0           141975
     4        60000      1048576       1185.8           141044
     4        80000      1048576       1150.4           141148
     4       100000      1048576       1131.3           141662

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:37:26 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        755.4            25824
     4         8000      1048576        770.5            28031
     4        12000      1048576        805.7            25217
     4        16000      1048576        774.7            25704
     4        20000      1048576        789.4            25610
     4        24000      1048576        782.7            25715
     4        28000      1048576        801.1            26366
     4        32000      1048576        788.1            25621
     4        36000      1048576        827.2            32648
     4        40000      1048576        760.0            25749

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:38:22 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        788.2            25507
     4         8000      1048576        780.6            25282
     4        12000      1048576        759.7            28633
     4        16000      1048576        778.3            25754
     4        20000      1048576        791.0            26937
     4        24000      1048576        781.0            33870
     4        28000      1048576        783.7            25000
     4        32000      1048576        769.1            25609
     4        36000      1048576        846.1            25322
     4        40000      1048576        766.7            29386

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:39:18 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        721.4            26302
     4         8000      1048576        812.7            26054
     4        12000      1048576        760.2            26898
     4        16000      1048576        789.5            26284
     4        20000      1048576        804.7            26166
     4        24000      1048576        767.2            26537
     4        28000      1048576        780.1            25894
     4        32000      1048576        823.1            26267
     4        36000      1048576        828.6            26035
     4        40000      1048576        741.0            27003

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:40:15 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        770.8            25624
     4         8000      1048576        796.5            26586
     4        12000      1048576        772.4            25986
     4        16000      1048576        782.3            26519
     4        20000      1048576        811.1            26870
     4        24000      1048576        780.0            25828
     4        28000      1048576        776.2            27652
     4        32000      1048576        805.8            25499
     4        36000      1048576        797.8            25843
     4        40000      1048576        757.0            26137

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:41:11 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        844.8            25694
     4         8000      1048576        798.6            25969
     4        12000      1048576        739.6            25612
     4        16000      1048576        805.8            26009
     4        20000      1048576        802.0            25492
     4        24000      1048576        757.8            26850
     4        28000      1048576        817.2            25633
     4        32000      1048576        774.0            25972
     4        36000      1048576        736.3            29246
     4        40000      1048576        798.7            30322

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:42:07 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        807.2            26135
     4         8000      1048576        793.3            26227
     4        12000      1048576        769.8            25081
     4        16000      1048576        769.6            27814
     4        20000      1048576        780.2            26284
     4        24000      1048576        785.3            25225
     4        28000      1048576        800.1            24517
     4        32000      1048576        801.7            26336
     4        36000      1048576        783.3            25237
     4        40000      1048576        790.5            26889

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:43:03 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        824.6            25579
     4         8000      1048576        746.7            25611
     4        12000      1048576        765.9            26062
     4        16000      1048576        768.9            25901
     4        20000      1048576        770.0            26139
     4        24000      1048576        803.0            26669
     4        28000      1048576        780.2            25409
     4        32000      1048576        790.1            25853
     4        36000      1048576        745.7            26321
     4        40000      1048576        768.2            26573

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:44:00 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        813.6            25163
     4         8000      1048576        743.7            26151
     4        12000      1048576        778.1            25203
     4        16000      1048576        793.9            26001
     4        20000      1048576        730.3            26105
     4        24000      1048576        792.9            25728
     4        28000      1048576        791.7            25413
     4        32000      1048576        806.1            25736
     4        36000      1048576        800.2            25943
     4        40000      1048576        815.7            25484

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:44:56 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        764.7            27916
     4         8000      1048576        761.3            24968
     4        12000      1048576        780.1            29541
     4        16000      1048576        778.7            25956
     4        20000      1048576        820.3            25184
     4        24000      1048576        764.5            25442
     4        28000      1048576        776.1            25173
     4        32000      1048576        786.0            25057
     4        36000      1048576        788.1            24686
     4        40000      1048576        801.2            27989

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:45:52 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        784.7            26891
     4         8000      1048576        789.0            27455
     4        12000      1048576        830.4            28067
     4        16000      1048576        770.2            27456
     4        20000      1048576        760.7            26822
     4        24000      1048576        804.9            28328
     4        28000      1048576        765.5            26183
     4        32000      1048576        774.6            26599
     4        36000      1048576        781.0            27314
     4        40000      1048576        804.4            29235

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:46:48 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        802.5            25348
     4         8000      1048576        793.3            25811
     4        12000      1048576        769.5            25996
     4        16000      1048576        789.7            26063
     4        20000      1048576        776.0            25953
     4        24000      1048576        821.4            26259
     4        28000      1048576        771.2            25599
     4        32000      1048576        791.1            26518
     4        36000      1048576        755.0            26246
     4        40000      1048576        776.1            28439

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:47:45 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        805.4            26047
     4         8000      1048576        827.1            25158
     4        12000      1048576        772.0            26986
     4        16000      1048576        789.4            27118
     4        20000      1048576        824.8            24913
     4        24000      1048576        768.2            25970
     4        28000      1048576        795.8            29084
     4        32000      1048576        816.2            25172
     4        36000      1048576        787.5            25965
     4        40000      1048576        789.0            25456

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:48:40 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        787.8            26273
     4         8000      1048576        744.7            26054
     4        12000      1048576        813.5            25304
     4        16000      1048576        806.6            25490
     4        20000      1048576        791.1            25485
     4        24000      1048576        738.6            26070
     4        28000      1048576        770.4            25517
     4        32000      1048576        788.2            26440
     4        36000      1048576        768.8            25331
     4        40000      1048576        769.2            25868

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 14:49:37 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        850.2            26010
     4         8000      1048576        759.7            27086
     4        12000      1048576        773.0            25741
     4        16000      1048576        818.5            25673
     4        20000      1048576        761.7            26738
     4        24000      1048576        755.8            26008
     4        28000      1048576        836.8            25936
     4        32000      1048576        815.9            26628
     4        36000      1048576        781.7            26121
     4        40000      1048576        765.7            26949

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:21:52 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        659.3            26367
     4         8000      1048576        758.0            25580
     4        12000      1048576        765.5            25448
     4        16000      1048576        756.3            27984
     4        20000      1048576        779.8            25794
     4        24000      1048576        795.3            26129
     4        28000      1048576        800.8            28062
     4        32000      1048576        776.2            27873
     4        36000      1048576        728.6            25186
     4        40000      1048576        807.9            26496

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:22:50 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        818.3            24955
     4         8000      1048576        742.3            25470
     4        12000      1048576        815.5            24837
     4        16000      1048576        782.8            26123
     4        20000      1048576        759.8            25815
     4        24000      1048576        796.8            25110
     4        28000      1048576        772.4            25575
     4        32000      1048576        814.8            26293
     4        36000      1048576        745.4            25894
     4        40000      1048576        809.6            25317

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:23:46 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        773.0            25475
     4         8000      1048576        761.0            26759
     4        12000      1048576        784.3            25283
     4        16000      1048576        769.1            25751
     4        20000      1048576        790.0            25880
     4        24000      1048576        803.1            25196
     4        28000      1048576        748.5            25628
     4        32000      1048576        787.6            25556
     4        36000      1048576        823.2            25504
     4        40000      1048576        792.5            26316

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:24:42 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        746.7            25490
     4         8000      1048576        816.0            26760
     4        12000      1048576        811.4            25591
     4        16000      1048576        760.3            25946
     4        20000      1048576        769.8            25588
     4        24000      1048576        818.0            25624
     4        28000      1048576        805.1            25558
     4        32000      1048576        776.1            25583
     4        36000      1048576        779.2            25832
     4        40000      1048576        802.5            25800

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:25:38 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        802.0            26193
     4         8000      1048576        793.2            26322
     4        12000      1048576        802.1            26112
     4        16000      1048576        744.5            26335
     4        20000      1048576        790.7            26961
     4        24000      1048576        815.7            28521
     4        28000      1048576        769.4            26467
     4        32000      1048576        786.8            27539
     4        36000      1048576        795.6            25928
     4        40000      1048576        767.0            26572

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:26:35 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        807.3            25624
     4         8000      1048576        790.0            25398
     4        12000      1048576        727.3            25822
     4        16000      1048576        833.2            25432
     4        20000      1048576        804.9            25750
     4        24000      1048576        780.9            25564
     4        28000      1048576        782.8            26477
     4        32000      1048576        808.6            26128
     4        36000      1048576        751.7            25678
     4        40000      1048576        776.0            25075

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:27:31 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        796.6            26172
     4         8000      1048576        812.4            26152
     4        12000      1048576        788.2            25754
     4        16000      1048576        766.8            25433
     4        20000      1048576        787.2            25202
     4        24000      1048576        794.9            25355
     4        28000      1048576        786.9            26056
     4        32000      1048576        783.8            25709
     4        36000      1048576        789.2            25397
     4        40000      1048576        801.4            26462

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:28:27 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        787.4            25404
     4         8000      1048576        793.7            25655
     4        12000      1048576        807.3            25704
     4        16000      1048576        808.1            25581
     4        20000      1048576        769.7            28071
     4        24000      1048576        821.6            25877
     4        28000      1048576        769.0            25303
     4        32000      1048576        770.1            25853
     4        36000      1048576        766.9            25939
     4        40000      1048576        787.5            26479

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:29:23 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        806.3            26043
     4         8000      1048576        779.3            26228
     4        12000      1048576        791.5            25275
     4        16000      1048576        824.3            26129
     4        20000      1048576        758.3            25784
     4        24000      1048576        783.0            25885
     4        28000      1048576        804.5            25112
     4        32000      1048576        801.7            24999
     4        36000      1048576        768.0            25482
     4        40000      1048576        792.0            26231

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:30:18 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        755.8            25597
     4         8000      1048576        788.5            25366
     4        12000      1048576        825.2            25081
     4        16000      1048576        766.0            25406
     4        20000      1048576        791.5            26519
     4        24000      1048576        777.2            25604
     4        28000      1048576        800.5            25485
     4        32000      1048576        811.1            25660
     4        36000      1048576        765.5            25165
     4        40000      1048576        804.4            25462

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:31:14 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        749.7            25548
     4         8000      1048576        783.0            25365
     4        12000      1048576        809.6            26550
     4        16000      1048576        757.3            25529
     4        20000      1048576        791.2            25409
     4        24000      1048576        817.5            25971
     4        28000      1048576        756.8            25344
     4        32000      1048576        773.9            28923
     4        36000      1048576        783.7            26071
     4        40000      1048576        802.9            25553

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:32:11 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        798.8            25296
     4         8000      1048576        764.1            25416
     4        12000      1048576        769.2            25723
     4        16000      1048576        767.7            25714
     4        20000      1048576        793.3            26171
     4        24000      1048576        789.5            26055
     4        28000      1048576        779.5            26040
     4        32000      1048576        775.8            27168
     4        36000      1048576        802.8            27057
     4        40000      1048576        791.6            28118

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:33:07 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        751.7            25490
     4         8000      1048576        823.8            25357
     4        12000      1048576        812.5            25306
     4        16000      1048576        754.3            25604
     4        20000      1048576        821.4            26509
     4        24000      1048576        810.0            25755
     4        28000      1048576        781.7            25160
     4        32000      1048576        787.5            25423
     4        36000      1048576        786.6            25239
     4        40000      1048576        798.3            25750

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:34:03 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         4000      1048576        753.3            26568
     4         8000      1048576        795.3            25738
     4        12000      1048576        794.5            25683
     4        16000      1048576        789.0            25830
     4        20000      1048576        764.7            25648
     4        24000      1048576        797.5            28815
     4        28000      1048576        808.5            25786
     4        32000      1048576        773.9            26123
     4        36000      1048576        771.4            26244
     4        40000      1048576        789.0            28305

#  ./fs_mark  -d  scratch  -L  100  -s  1048576  -n  1000  -S  0 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:35:06 2021
#	Sync method: NO SYNC: Test does not issue sync() or fsync() calls.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576       3138.2             4718
     4         2000      1048576       2904.3             4944
     4         3000      1048576       2744.2             5029
     4         4000      1048576       2843.5             5145
     4         5000      1048576       2841.9             5222
     4         6000      1048576       2701.4             5109
     4         7000      1048576       2779.0             5232
     4         8000      1048576       2767.0             5169
     4         9000      1048576       2681.5             5363
     4        10000      1048576       2869.9             5105
     4        11000      1048576       2772.6             5131
     4        12000      1048576       2895.2             5214
     4        13000      1048576       2789.4             5153
     4        14000      1048576       2696.6             5187
     4        15000      1048576       2838.3             5091
     4        16000      1048576       2803.9             5116
     4        17000      1048576       2898.2             5016
     4        18000      1048576       2794.6             5252
     4        19000      1048576       2723.0             5079
     4        20000      1048576       2963.2             5001
     4        21000      1048576       2765.4             5113
     4        22000      1048576       2777.3             5395
     4        23000      1048576       2901.7             5049
     4        24000      1048576       2714.0             5244
     4        25000      1048576       2866.2             5050
     4        26000      1048576       2985.6             4790
     4        27000      1048576       2756.7             5080
     4        28000      1048576       2908.4             4960
     4        29000      1048576       2926.0             4954
     4        30000      1048576       2756.5             5085
     4        31000      1048576       2910.1             5039
     4        32000      1048576       2735.5             5029
     4        33000      1048576       2898.1             5018
     4        34000      1048576       2820.9             4940
     4        35000      1048576       2858.1             5061
     4        36000      1048576       2832.1             5140
     4        37000      1048576       2833.7             5023
     4        38000      1048576       2891.3             5182
     4        39000      1048576       2852.9             5120
     4        40000      1048576       2874.6             5018
     4        41000      1048576       2904.8             5054
     4        42000      1048576       2917.1             4954
     4        43000      1048576       2889.4             5112
     4        44000      1048576       2922.1             5078
     4        45000      1048576       2833.3             5016
     4        46000      1048576       2943.6             5095
     4        47000      1048576       2956.9             4980
     4        48000      1048576       2868.2             5109
     4        49000      1048576       2915.9             4868
     4        50000      1048576       2901.5             4962
     4        51000      1048576       2946.9             5101
     4        52000      1048576       3028.1             4868
     4        53000      1048576       2799.7             5087
     4        54000      1048576       2900.0             5019
     4        55000      1048576       2974.1             4967
     4        56000      1048576       2876.8             5155
     4        57000      1048576       2868.7             5095
     4        58000      1048576       2809.3             5015
     4        59000      1048576       2884.6             5031
     4        60000      1048576       2950.5             4957
     4        61000      1048576       2755.3             5065
     4        62000      1048576       2916.7             5164
     4        63000      1048576       2900.4             4919
     4        64000      1048576       2909.1             5102
     4        65000      1048576       2928.1             4966
     4        66000      1048576       2828.7             5147
     4        67000      1048576       2896.9             5247
     4        68000      1048576       2877.3             5186
     4        69000      1048576       2936.7             4911
     4        70000      1048576       2933.2             5040
     4        71000      1048576       2901.5             4907
     4        72000      1048576       2872.1             5082
     4        73000      1048576       2958.0             4948
     4        74000      1048576       2801.9             5090
     4        75000      1048576       2995.9             4827
     4        76000      1048576       2870.5             5093
     4        77000      1048576       2883.3             5167
     4        78000      1048576       2946.4             4979
     4        79000      1048576       2890.0             4977
     4        80000      1048576       2915.4             5127
     4        81000      1048576       2867.0             5007
     4        82000      1048576       2897.0             5257
     4        83000      1048576       2941.2             5118
     4        84000      1048576       2892.8             4918
     4        85000      1048576       2909.0             5035
     4        86000      1048576       2952.9             4909
     4        87000      1048576       2887.8             5021
     4        88000      1048576       2934.3             5118
     4        89000      1048576       2909.2             5122
     4        90000      1048576       2903.4             5137
     4        91000      1048576       2992.4             4874
     4        92000      1048576       2852.2             5115
     4        93000      1048576       2896.9             5200
     4        94000      1048576       2889.2             4981
     4        95000      1048576       2946.9             4955
     4        96000      1048576       2965.2             5014
     4        97000      1048576       2891.2             5129
     4        98000      1048576       2906.7             5135
     4        99000      1048576       2875.1             5037
     4       100000      1048576       2918.7             5353

#  ./fs_mark  -d  scratch  -L  100  -s  1048576  -n  1000  -S  0 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:35:48 2021
#	Sync method: NO SYNC: Test does not issue sync() or fsync() calls.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576       3144.3             4681
     4         2000      1048576       2873.3             4984
     4         3000      1048576       2698.6             5050
     4         4000      1048576       2881.8             4969
     4         5000      1048576       2818.6             5135
     4         6000      1048576       2663.8             5120
     4         7000      1048576       2832.8             5082
     4         8000      1048576       2846.3             5011
     4         9000      1048576       2828.0             5085
     4        10000      1048576       2845.7             4980
     4        11000      1048576       2714.0             4975
     4        12000      1048576       2782.9             5007
     4        13000      1048576       2812.7             4843
     4        14000      1048576       2630.1             5276
     4        15000      1048576       2845.3             5116
     4        16000      1048576       2840.8             4945
     4        17000      1048576       2723.9             5184
     4        18000      1048576       2906.2             5041
     4        19000      1048576       2668.6             5225
     4        20000      1048576       2823.6             5169
     4        21000      1048576       2901.7             4875
     4        22000      1048576       2669.4             5195
     4        23000      1048576       2949.6             5114
     4        24000      1048576       2803.3             5069
     4        25000      1048576       2982.9             4956
     4        26000      1048576       2881.2             5083
     4        27000      1048576       2751.3             5145
     4        28000      1048576       2876.2             5106
     4        29000      1048576       2908.4             5015
     4        30000      1048576       2731.8             5175
     4        31000      1048576       2923.2             5073
     4        32000      1048576       2788.6             5039
     4        33000      1048576       2930.1             5128
     4        34000      1048576       2787.3             5115
     4        35000      1048576       2663.4             5079
     4        36000      1048576       2919.3             4972
     4        37000      1048576       2868.7             4982
     4        38000      1048576       2797.8             5282
     4        39000      1048576       2919.6             4940
     4        40000      1048576       2752.0             5118
     4        41000      1048576       2886.5             5122
     4        42000      1048576       2930.9             4859
     4        43000      1048576       2826.2             5172
     4        44000      1048576       2918.9             5107
     4        45000      1048576       2880.9             4915
     4        46000      1048576       2903.1             5130
     4        47000      1048576       2942.6             4829
     4        48000      1048576       2880.7             5129
     4        49000      1048576       2930.1             5063
     4        50000      1048576       2875.9             4961
     4        51000      1048576       2905.9             5304
     4        52000      1048576       2946.3             5015
     4        53000      1048576       2844.7             5106
     4        54000      1048576       2927.9             4922
     4        55000      1048576       2909.6             4937
     4        56000      1048576       2798.2             5153
     4        57000      1048576       2889.7             5153
     4        58000      1048576       2865.2             4997
     4        59000      1048576       2934.5             5022
     4        60000      1048576       2890.9             5074
     4        61000      1048576       2858.0             5114
     4        62000      1048576       2950.5             5018
     4        63000      1048576       2846.1             5029
     4        64000      1048576       2970.1             4878
     4        65000      1048576       2929.1             4941
     4        66000      1048576       2846.6             5032
     4        67000      1048576       2811.5             5284
     4        68000      1048576       2896.5             5009
     4        69000      1048576       2945.6             4976
     4        70000      1048576       2948.6             5093
     4        71000      1048576       2845.4             5016
     4        72000      1048576       2929.8             5060
     4        73000      1048576       2884.4             5029
     4        74000      1048576       2816.9             5475
     4        75000      1048576       2959.9             4985
     4        76000      1048576       2878.6             4958
     4        77000      1048576       2948.8             4970
     4        78000      1048576       2864.5             4992
     4        79000      1048576       2896.2             5028
     4        80000      1048576       2967.7             4998
     4        81000      1048576       2877.8             4912
     4        82000      1048576       2917.6             5074
     4        83000      1048576       2981.5             4883
     4        84000      1048576       2880.6             4981
     4        85000      1048576       2919.4             5178
     4        86000      1048576       2954.2             4921
     4        87000      1048576       2844.4             5015
     4        88000      1048576       2904.0             5099
     4        89000      1048576       2833.2             4993
     4        90000      1048576       2916.2             5117
     4        91000      1048576       2998.7             4700
     4        92000      1048576       2888.8             5090
     4        93000      1048576       2924.4             5069
     4        94000      1048576       2895.7             5155
     4        95000      1048576       2929.6             5089
     4        96000      1048576       2956.8             4940
     4        97000      1048576       2776.3             5162
     4        98000      1048576       2922.1             5121
     4        99000      1048576       2970.2             4765
     4       100000      1048576       2756.8             5309

#  ./fs_mark  -d  scratch  -L  100  -s  1048576  -n  1000  -S  0 
#	Version 3.3, 1 thread(s) starting at Sun Dec 26 17:36:30 2021
#	Sync method: NO SYNC: Test does not issue sync() or fsync() calls.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     4         1000      1048576       3095.4             4652
     4         2000      1048576       2864.7             4964
     4         3000      1048576       2702.4             5122
     4         4000      1048576       2826.9             5088
     4         5000      1048576       2875.4             5165
     4         6000      1048576       2770.0             5050
     4         7000      1048576       2833.7             5155
     4         8000      1048576       2747.5             5151
     4         9000      1048576       2770.8             5188
     4        10000      1048576       2819.6             5124
     4        11000      1048576       2780.8             4975
     4        12000      1048576       2888.4             5021
     4        13000      1048576       2796.8             4981
     4        14000      1048576       2712.3             5047
     4        15000      1048576       2943.0             4999
     4        16000      1048576       2756.3             5047
     4        17000      1048576       2906.9             4989
     4        18000      1048576       2800.3             5199
     4        19000      1048576       2768.2             5182
     4        20000      1048576       2898.9             5086
     4        21000      1048576       2950.5             4808
     4        22000      1048576       2650.6             5239
     4        23000      1048576       2995.1             4811
     4        24000      1048576       2885.7             5010
     4        25000      1048576       2884.0             5020
     4        26000      1048576       2895.2             5018
     4        27000      1048576       2810.7             5106
     4        28000      1048576       2871.5             5236
     4        29000      1048576       2924.4             5110
     4        30000      1048576       2892.4             5402
     4        31000      1048576       2912.5             5050
     4        32000      1048576       2849.8             5010
     4        33000      1048576       2934.4             5069
     4        34000      1048576       2977.0             4863
     4        35000      1048576       2869.7             5017
     4        36000      1048576       2942.4             4945
     4        37000      1048576       2816.5             4942
     4        38000      1048576       2940.7             5023
     4        39000      1048576       2988.0             4847
     4        40000      1048576       2851.5             5099
     4        41000      1048576       2795.0             5304
     4        42000      1048576       2996.7             4838
     4        43000      1048576       2837.7             4942
     4        44000      1048576       2880.1             4818
     4        45000      1048576       2863.9             5020
     4        46000      1048576       2888.6             5157
     4        47000      1048576       2961.8             5045
     4        48000      1048576       2861.4             5130
     4        49000      1048576       2983.6             5042
     4        50000      1048576       2853.4             5149
     4        51000      1048576       2953.0             5068
     4        52000      1048576       2872.1             5252
     4        53000      1048576       2854.8             5315
     4        54000      1048576       2885.9             5350
     4        55000      1048576       2889.9             5024
     4        56000      1048576       2916.7             5024
     4        57000      1048576       2915.1             4977
     4        58000      1048576       2852.7             5062
     4        59000      1048576       2810.2             5034
     4        60000      1048576       2946.5             4739
     4        61000      1048576       2874.4             5090
     4        62000      1048576       2914.1             4954
     4        63000      1048576       2887.6             4968
     4        64000      1048576       2920.6             5033
     4        65000      1048576       2947.0             5088
     4        66000      1048576       2789.9             5124
     4        67000      1048576       2870.7             5233
     4        68000      1048576       2826.1             5168
     4        69000      1048576       2875.1             4981
     4        70000      1048576       2963.5             5030
     4        71000      1048576       2856.7             5017
     4        72000      1048576       2935.9             5141
     4        73000      1048576       2922.3             5049
     4        74000      1048576       2810.6             5126
     4        75000      1048576       2928.3             5018
     4        76000      1048576       2830.5             5314
     4        77000      1048576       2951.5             5061
     4        78000      1048576       2907.4             5049
     4        79000      1048576       2844.5             5180
     4        80000      1048576       2935.9             5304
     4        81000      1048576       2879.9             4954
     4        82000      1048576       2898.0             5110
     4        83000      1048576       2993.3             5077
     4        84000      1048576       2866.3             5117
     4        85000      1048576       2881.0             5338
     4        86000      1048576       2927.6             4815
     4        87000      1048576       2943.4             5066
     4        88000      1048576       2869.1             5099
     4        89000      1048576       2832.1             5126
     4        90000      1048576       2915.6             5142
     4        91000      1048576       2977.3             4891
     4        92000      1048576       2891.8             5125
     4        93000      1048576       2934.1             5067
     4        94000      1048576       2877.8             4931
     4        95000      1048576       2958.6             4993
     4        96000      1048576       2942.2             4947
     4        97000      1048576       2860.2             5039
     4        98000      1048576       2926.7             5036
     4        99000      1048576       2847.1             5099
     4       100000      1048576       2958.6             5037

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Mon Dec 27 11:54:24 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     1         4000      1048576        835.1            25280
     1         8000      1048576        767.2            26394
     1        12000      1048576        836.6            28403
     1        16000      1048576        818.6            25589
     1        20000      1048576        801.2            26087
     1        24000      1048576        805.8            25911
     1        28000      1048576        814.3            26005
     1        32000      1048576        827.0            28203
     1        36000      1048576        835.8            25228
     1        40000      1048576        797.2            25487

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Mon Dec 27 11:55:19 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     1         4000      1048576        839.8            25674
     1         8000      1048576        783.0            25919
     1        12000      1048576        799.8            25562
     1        16000      1048576        816.3            27043
     1        20000      1048576        799.5            25452
     1        24000      1048576        825.0            26655
     1        28000      1048576        810.6            26641
     1        32000      1048576        790.7            26411
     1        36000      1048576        820.3            25551
     1        40000      1048576        797.0            26040

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  4000  -D  32 
#	Version 3.3, 1 thread(s) starting at Mon Dec 27 11:56:13 2021
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  Time based hash between directories across 32 subdirectories with 180 seconds per subdirectory.
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.
#
FSUse%        Count         Size    Files/sec     App Overhead
     1         4000      1048576        823.3            24994
     1         8000      1048576        824.1            26317
     1        12000      1048576        814.4            25558
     1        16000      1048576        834.2            25694
     1        20000      1048576        832.8            25543
     1        24000      1048576        819.2            25265
     1        28000      1048576        836.9            26120
     1        32000      1048576        772.2            25674
     1        36000      1048576        790.9            27044
     1        40000      1048576        792.4            26172
